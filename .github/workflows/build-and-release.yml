name: Build and Release Framebolt

on:
  push:
    branches:
      - main
      - dev
  pull_request:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # --- DESKTOP: Linux ---
          - name: Desktop (Linux)
            os: ubuntu-latest
            use_system_gst: true
            build_script: |
              cmake -S . -B build -DUSE_SYSTEM_GSTREAMER=ON
              cmake --build build --config Release
              zip -j framebolt-linux.zip build/framebolt
            artifact: framebolt-linux.zip

          # --- DESKTOP: Windows ---
          - name: Desktop (Windows)
            os: windows-latest
            gst_cache_key: gstreamer-windows-1.26.7
            gst_dev_url: "https://gstreamer.freedesktop.org/data/pkg/windows/1.26.7/msvc/gstreamer-1.0-devel-msvc-x86_64-1.26.7.msi"
            build_script: |
              cmake -S . -B build -DCMAKE_PREFIX_PATH="C:\\gstreamer\\1.0\\x86_64"
              cmake --build build --config Release
              powershell Compress-Archive -Path build\\Release\\*.exe -DestinationPath framebolt-windows.zip
            artifact: framebolt-windows.zip

          # --- DESKTOP: macOS ---
          - name: Desktop (macOS)
            os: macos-latest
            gst_cache_key: gstreamer-macos-1.26.7
            gst_pkg_url: "https://gstreamer.freedesktop.org/data/pkg/osx/1.26.7/gstreamer-1.0-devel-1.26.7-universal.pkg"
            build_script: |
              cmake -S . -B build-macos -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
              cmake --build build-macos --config Release
              mkdir -p artifacts
              cp -R build/*.app artifacts/ 2>/dev/null || true
              cp build-macos/framebolt artifacts/framebolt-macos || true
              cd artifacts && zip -r ../framebolt-macos.zip ./*
            artifact: framebolt-macos.zip

          # --- MOBILE: Android ---
          - name: Android
            os: ubuntu-latest
            gst_cache_key: gstreamer-android-1.26.7
            gst_android_url: "https://gstreamer.freedesktop.org/data/pkg/android/1.26.7/gstreamer-1.0-android-universal-1.26.7.tar.xz"
            build_script: |
              mkdir -p android-project/app/src/main/jni/
              tar -xf $HOME/.cache/gstreamer/gstreamer-android.tar.xz
              mv gstreamer-1.0-android-universal-* android-project/app/src/main/jni/gstreamer
              cd android-project
              ./gradlew assembleRelease
              mkdir -p ../artifacts
              cp app/build/outputs/apk/release/*.apk ../artifacts/
              cd ../artifacts && zip -r framebolt-android.zip ./*
            artifact: artifacts/framebolt-android.zip

          # --- MOBILE: iOS ---
          - name: iOS
            os: macos-latest
            gst_cache_key: gstreamer-ios-1.26.7
            gst_ios_url: "https://gstreamer.freedesktop.org/data/pkg/ios/1.26.7/gstreamer-1.0-ios-universal-1.26.7.tar.xz"
            build_script: |
              tar -xf $HOME/.cache/gstreamer/gstreamer-ios.tar.xz
              GST_IOS_DIR=$(find . -type d -name "gstreamer-1.0-ios-universal-*")
              cmake -S . -B build-ios -G Xcode \
                -DCMAKE_SYSTEM_NAME=iOS \
                -DCMAKE_OSX_SYSROOT=iphonesimulator \
                -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
                -DCMAKE_PREFIX_PATH="$GST_IOS_DIR"
              cmake --build build-ios --config Debug
              mkdir -p artifacts
              find build-ios -name "*.app" -exec cp -R {} artifacts/ \;
              cd artifacts && zip -r ../framebolt-ios.zip ./*
            artifact: framebolt-ios.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Cache SDL sources (saves ~5 min each run) ---
      - name: Cache SDL sources
        uses: actions/cache@v4
        with:
          path: vendored
          key: sdl-vendored-${{ runner.os }}

      - name: Set up SDL dependencies
        run: |
          if [ ! -d vendored ]; then mkdir vendored; fi
          if [ ! -d vendored/SDL ]; then git clone https://github.com/libsdl-org/SDL.git vendored/SDL; fi
          if [ ! -d vendored/SDL_ttf ]; then git clone https://github.com/libsdl-org/SDL_ttf.git vendored/SDL_ttf; fi
          cd vendored/SDL_ttf && ./external/download.sh && cd ../..

      # --- Platform-specific dependencies ---
      - name: Set up Linux deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update || true
          sudo apt-get install -y \
            build-essential cmake zip git \
            libx11-dev libxext-dev libxrandr-dev libxrender-dev libxss-dev \
            libxcursor-dev libxi-dev libxinerama-dev libwayland-dev libxkbcommon-dev \
            libdrm-dev libgbm-dev libasound2-dev libpulse-dev libudev-dev libdbus-1-dev \
            libibus-1.0-dev fcitx-libs-dev gstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      # --- Cache and setup GStreamer ---
      - name: Cache GStreamer SDK
        if: ${{ !matrix.use_system_gst }}
        uses: actions/cache@v4
        with:
          path: $HOME/.cache/gstreamer
          key: ${{ matrix.gst_cache_key }}

      - name: Download GStreamer SDK (Windows)
        if: runner.os == 'Windows' && !matrix.use_system_gst
        run: |
          mkdir -p $env:USERPROFILE\.cache\gstreamer
          if (!(Test-Path "$env:USERPROFILE\.cache\gstreamer\gstreamer-devel.msi")) {
            Invoke-WebRequest -Uri ${{ matrix.gst_dev_url }} -OutFile "$env:USERPROFILE\.cache\gstreamer\gstreamer-devel.msi"
          }
          msiexec /i "$env:USERPROFILE\.cache\gstreamer\gstreamer-devel.msi" /qn TARGETDIR="C:\\gstreamer"

      - name: Download GStreamer SDK (macOS/iOS/Android)
        if: runner.os != 'Windows' && !matrix.use_system_gst
        run: |
          mkdir -p $HOME/.cache/gstreamer
          if [ ! -f "$HOME/.cache/gstreamer/gstreamer-${{ matrix.name | lower }}.tar.xz" ]; then
            if [ "${{ matrix.gst_pkg_url }}" != "" ]; then
              curl -L ${{ matrix.gst_pkg_url }} -o $HOME/.cache/gstreamer/gstreamer-macos.pkg
              sudo installer -pkg $HOME/.cache/gstreamer/gstreamer-macos.pkg -target /
            elif [ "${{ matrix.gst_android_url }}" != "" ]; then
              curl -L ${{ matrix.gst_android_url }} -o $HOME/.cache/gstreamer/gstreamer-android.tar.xz
            elif [ "${{ matrix.gst_ios_url }}" != "" ]; then
              curl -L ${{ matrix.gst_ios_url }} -o $HOME/.cache/gstreamer/gstreamer-ios.tar.xz
            fi
          fi

      # --- Build ---
      - name: Build ${{ matrix.name }}
        run: ${{ matrix.build_script }}

      - name: Upload CI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.artifact }}
          if-no-files-found: ignore

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Determine release type
        id: release_type
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "release_type=release" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "release_type=pre-release" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Framebolt ${{ github.run_number }}
          prerelease: ${{ steps.release_type.outputs.prerelease }}
          files: release-assets/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
