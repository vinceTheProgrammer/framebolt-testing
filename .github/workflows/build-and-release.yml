name: Build and Release Framebolt

on:
  push:
    branches:
      - main
      - dev
  pull_request:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # --- DESKTOP: Linux ---
          - name: Desktop (Linux)
            os: ubuntu-latest
            download_script: |
              echo "hi"
            build_script: |
              cmake -S . -B build -DUSE_SYSTEM_GSTREAMER=ON
              cmake --build build --config Release
              cp "DejaVuSans.ttf" build
              zip -j framebolt-linux.zip build/framebolt build/DejaVuSans.ttf
            artifact: framebolt-linux.zip

          # --- DESKTOP: Windows ---
          - name: Desktop (Windows)
            os: windows-latest
            gst_runtime_url: "https://gstreamer.freedesktop.org/data/pkg/windows/1.26.7/msvc/gstreamer-1.0-msvc-x86_64-1.26.7.msi"
            gst_dev_url: "https://gstreamer.freedesktop.org/data/pkg/windows/1.26.7/msvc/gstreamer-1.0-devel-msvc-x86_64-1.26.7.msi"
            download_script: |
              echo "hi"
            build_script: |
              cmake -S . -B build -DCMAKE_PREFIX_PATH="C:\\gstreamer\\1.0\\msvc_x86_64"
              cmake --build build --config Release
            artifact: framebolt-windows.zip

          # --- DESKTOP: macOS ---
          - name: Desktop (macOS)
            os: macos-latest
            gst_pkg_devel_url: "https://gstreamer.freedesktop.org/data/pkg/osx/1.26.7/gstreamer-1.0-devel-1.26.7-universal.pkg"
            gst_pkg_runtime_url: "https://gstreamer.freedesktop.org/data/pkg/osx/1.26.7/gstreamer-1.0-1.26.7-universal.pkg"
            download_script: |
              echo "hi"
            build_script: |
              cmake -S . -B build-macos -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
              cmake --build build-macos --config Release
            artifact: framebolt-macos.zip

          # --- MOBILE: Android ---
          - name: Android
            os: ubuntu-latest
            download_script: |
              GST_ANDROID_URL="https://gstreamer.freedesktop.org/data/pkg/android/1.26.7/gstreamer-1.0-android-universal-1.26.7.tar.xz"
              mkdir -p android-project/app/src/main/jni/
              echo "Downloading $GST_ANDROID_URL..."
              curl -L "$GST_ANDROID_URL" -o gstreamer-android.tar.xz
              tar -xf gstreamer-android.tar.xz
            build_script: |
              # Create expected structure
              mkdir -p android-project/app/src/main/jniLibs/{arm64-v8a,armeabi-v7a,x86,x86_64}
              mkdir -p android-project/app/src/main/jni/gstreamer

              # Copy includes (they’re same across ABIs)
              mv arm64/include/* android-project/app/src/main/jni/gstreamer/

              # Copy .so files into jniLibs
              mv arm64/lib/*.so android-project/app/src/main/jniLibs/arm64-v8a/
              mv armv7/lib/*.so android-project/app/src/main/jniLibs/armeabi-v7a/
              mv x86/lib/*.so android-project/app/src/main/jniLibs/x86/
              mv x86_64/lib/*.so android-project/app/src/main/jniLibs/x86_64/

              cd android-project
              ./gradlew assembleRelease
              mkdir -p ../artifacts
              cp app/build/outputs/apk/release/*.apk ../artifacts/
              cd ../artifacts && zip -r framebolt-android.zip ./*
            artifact: artifacts/framebolt-android.zip


          # --- MOBILE: iOS ---
          - name: iOS
            os: macos-latest
            download_script: |
              GST_IOS_URL="https://gstreamer.freedesktop.org/data/pkg/ios/1.26.7/gstreamer-1.0-devel-1.26.7-ios-universal.pkg"
              echo "Downloading $GST_IOS_URL..."
              curl -L "$GST_IOS_URL" -o gstreamer-ios.tar.xz
              tar -xf gstreamer-ios.tar.xz
            gst_pkg_devel_url: "https://gstreamer.freedesktop.org/data/pkg/osx/1.26.7/gstreamer-1.0-devel-1.26.7-universal.pkg"
            gst_pkg_runtime_url: "https://gstreamer.freedesktop.org/data/pkg/osx/1.26.7/gstreamer-1.0-1.26.7-universal.pkg"
            build_script: |
              GST_IOS_DIR=$(find . -type d -name "gstreamer-1.0-ios-universal-*")
              cmake -S . -B build-ios -G Xcode \
                -DCMAKE_SYSTEM_NAME=iOS \
                -DCMAKE_OSX_SYSROOT=iphonesimulator \
                -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
                -DCMAKE_PREFIX_PATH="$GST_IOS_DIR"
              cmake --build build-ios --config Debug
              mkdir -p artifacts
              find build-ios -name "*.app" -exec cp -R {} artifacts/ \;
              cd artifacts && zip -r ../framebolt-ios.zip ./*
            artifact: framebolt-ios.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Linux / macOS SDL deps ---
      - name: Set up dependencies (Linux/Mac only)
        if: runner.os != 'Windows'
        run: |
          git clone https://github.com/libsdl-org/SDL.git vendored/SDL
          git clone https://github.com/libsdl-org/SDL_ttf.git vendored/SDL_ttf
          git clone https://github.com/bytecodealliance/wasm-micro-runtime.git external/wamr
          cd vendored/SDL_ttf && ./external/download.sh && cd ../..

          if [ "$RUNNER_OS" = "Linux" ]; then
            echo "🧱 Installing Linux build dependencies..."
            sudo apt-get update || true
            sudo apt-get install -y \
              build-essential cmake zip git \
              libx11-dev libxext-dev libxrandr-dev libxrender-dev libxss-dev \
              libxcursor-dev libxi-dev libxinerama-dev libwayland-dev libxkbcommon-dev \
              libdrm-dev libgbm-dev libasound2-dev libpulse-dev libudev-dev libdbus-1-dev \
              libibus-1.0-dev fcitx-libs-dev gstreamer1.0-dev libgstreamer-plugins-base1.0-dev

          elif [ "$RUNNER_OS" = "macOS" ]; then
            echo "🍎 Installing GStreamer for macOS..."
            mkdir -p gst-installer
            cd gst-installer

            echo "Downloading GStreamer runtime..."
            curl -L "${{ matrix.gst_pkg_runtime_url }}" -o gstreamer-runtime.pkg

            echo "Downloading GStreamer devel..."
            curl -L "${{ matrix.gst_pkg_devel_url }}" -o gstreamer-devel.pkg

            echo "Installing both packages..."
            sudo installer -pkg gstreamer-runtime.pkg -target /
            sudo installer -pkg gstreamer-devel.pkg -target /

            echo "✅ GStreamer framework installed to /Library/Frameworks/"
            cd ..

          fi

      # --- Windows SDL + GStreamer setup ---
      - name: Set up dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          git clone https://github.com/libsdl-org/SDL.git vendored/SDL
          git clone https://github.com/libsdl-org/SDL_ttf.git vendored/SDL_ttf
          git clone https://github.com/bytecodealliance/wasm-micro-runtime.git external/wamr
          cd vendored/SDL_ttf
          ./external/Get-GitModules.ps1
          cd ../..
          echo "Installing GStreamer dev..."
          curl -L ${{ matrix.gst_dev_url }} -o gstreamer-devel.msi
          $args = '/i', 'gstreamer-devel.msi', '/qn', 'INSTALLDIR=C:\gstreamer', '/L*v', 'C:\install.log'
          $process = Start-Process msiexec -ArgumentList $args -Wait -PassThru
          if ($process.ExitCode -ne 0) {
            Write-Host "❌ GStreamer install failed with exit code $($process.ExitCode)"
            Get-Content C:\install.log -Tail 20
            exit 1
          }
          Write-Host "✅ GStreamer dev installed successfully"
          curl -L ${{ matrix.gst_runtime_url }} -o gstreamer-runtime.msi
          $args = '/i', 'gstreamer-runtime.msi', '/qn', 'INSTALLDIR=C:\gstreamer', '/L*v', 'C:\install.log'
          $process = Start-Process msiexec -ArgumentList $args -Wait -PassThru
          if ($process.ExitCode -ne 0) {
            Write-Host "❌ GStreamer install failed with exit code $($process.ExitCode)"
            Get-Content C:\install.log -Tail 20
            exit 1
          }
          Write-Host "✅ GStreamer installed successfully"

      - name: Download GStreamer ${{ matrix.name }}
        run: ${{ matrix.download_script }}



      - name: List C drive contents
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Contents of C:\"
          Get-ChildItem C:\ | Select-Object Name, LastWriteTime
      - name: List C drive contents2
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Contents of C:\gstreamer"
          Get-ChildItem C:\gstreamer | Select-Object Name, LastWriteTime
      - name: List C drive contents3
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Contents of C:\gstreamer\1.0"
          Get-ChildItem C:\gstreamer\1.0 | Select-Object Name, LastWriteTime

      - name: Debug GStreamer path (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "=== Checking for installed GStreamer frameworks ==="
          ls -R /Library/Frameworks || true
          echo "=== Checking GStreamer in /usr/local and /opt/homebrew ==="
          ls -R /usr/local/Cellar/gstreamer* 2>/dev/null || true
          ls -R /opt/homebrew/Cellar/gstreamer* 2>/dev/null || true
      - name: Debug GStreamer archive (Android)
        if: matrix.name == 'Android'
        run: |
          echo "=== Listing downloaded GStreamer ==="
          ls -lh || true
          echo "=== Checking for GStreamer tarballs ==="
          file * || true
      - name: Debug GStreamer archive (iOS)
        if: matrix.name == 'iOS'
        run: |
          echo "=== Listing downloaded iOS GStreamer cache ==="
          ls -lh || true
          echo "=== File type check ==="
          file * || true


      - name: Build ${{ matrix.name }}
        run: ${{ matrix.build_script }}

      - name: Copy only required GStreamer DLLs
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          ./scripts/copy_dlls_recursive.ps1

      - name: Fix and bundle GStreamer dylibs
        if: runner.os == 'macOS'
        run: |
          bash scripts/bundle_gstreamer_macos.sh

      - name: Copy font (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $outDir = "build\Release"
          Copy-Item "DejaVuSans.ttf" -Destination $outDir -Force

      - name: Copy font into app bundle (macOS)
        if: runner.os == 'macOS'
        run: |
          APP_PATH="build/framebolt.app"
          RES_DIR="$APP_PATH/Contents/Resources"
          mkdir -p "$RES_DIR"
          cp "DejaVuSans.ttf" "$RES_DIR/"

      - name: Compress archive (Mac)
        if: runner.os == 'macOS'
        run: |
          mkdir -p artifacts
          cp -R build-macos/framebolt.app artifacts/
          cd artifacts && zip -r ../framebolt-macos.zip framebolt.app

      - name: Compress archive (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          powershell Compress-Archive -Path build\\Release\\* -DestinationPath framebolt-windows.zip


      # 2. Install base dependencies required for Cerbero
      - name: Install system dependencies
        if: matrix.name == 'Android'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3 python3-pip python3-venv git \
            build-essential autoconf automake libtool bison flex \
            cmake meson ninja-build pkg-config \
            unzip zip wget curl

      # 3. Clone Cerbero (official GStreamer build system)
      - name: Clone Cerbero
        if: matrix.name == 'Android'
        run: |
          git clone https://gitlab.freedesktop.org/gstreamer/cerbero.git
          cd cerbero
          # Optional: Checkout specific GStreamer branch or tag
          # git checkout 1.24

      # 4. Bootstrap Cerbero for Android Universal
      - name: Bootstrap Cerbero for Android Universal
        if: matrix.name == 'Android'
        working-directory: cerbero
        run: |
          ./cerbero-uninstalled -c config/cross-android-universal.cbc bootstrap

      # 5. Build and package GStreamer for Android Universal
      - name: Build GStreamer for Android Universal
        if: matrix.name == 'Android'
        working-directory: cerbero
        run: |
          ./cerbero-uninstalled -c config/cross-android-universal.cbc package gstreamer-1.0

      # 6. Upload artifacts (e.g., .so libraries, AARs, etc.)
      - name: Upload GStreamer Android Universal binaries
        if: matrix.name == 'Android'
        uses: actions/upload-artifact@v4
        with:
          name: gstreamer-android-universal
          path: |
            cerbero/dist/android_universal/*.zip
            cerbero/dist/android_universal/*.tar.*
            

      - name: Upload CI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.artifact }}
          if-no-files-found: ignore

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Determine release type
        id: release_type
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "release_type=release" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "release_type=pre-release" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Framebolt ${{ github.run_number }}
          prerelease: ${{ steps.release_type.outputs.prerelease }}
          files: release-assets/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
